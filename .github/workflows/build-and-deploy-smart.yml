name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ekskog/jpeg2avif-js
  NAMESPACE: webapps

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check what changed
      id: check
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check if source code files changed (requiring build)
        SHOULD_BUILD=false
        
        # Check exact files
        BUILD_FILES="server.js package.json package-lock.json Dockerfile .dockerignore"
        for file in $BUILD_FILES; do
          if echo "$CHANGED_FILES" | grep -q "^$file$"; then
            echo "Build file changed: $file"
            SHOULD_BUILD=true
            break
          fi
        done
        
        # Check src/ directory
        if echo "$CHANGED_FILES" | grep -q "^src/"; then
          echo "Source code changed in src/ directory"
          SHOULD_BUILD=true
        fi
        
        # Check if deployment files changed (requiring deploy only)
        DEPLOY_FILES="k8s-deployment-ghcr.yaml .github/workflows/build-and-deploy-smart.yml"
        SHOULD_DEPLOY=false
        
        for file in $DEPLOY_FILES; do
          if echo "$CHANGED_FILES" | grep -q "^$file$"; then
            echo "Deploy file changed: $file"
            SHOULD_DEPLOY=true
            break
          fi
        done
        
        # If build files changed, we also need to deploy
        if [ "$SHOULD_BUILD" = true ]; then
          SHOULD_DEPLOY=true
        fi
        
        echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
        echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        
        echo "Decision: BUILD=$SHOULD_BUILD, DEPLOY=$SHOULD_DEPLOY"

  build:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [check-changes, build]
    if: always() && needs.check-changes.outputs.should-deploy == 'true' && (needs.build.result == 'success' || needs.build.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Create namespace if it doesn't exist
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Update Kubernetes deployment
      run: |
        # Use latest tag for deployment
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Update the deployment with new image
        kubectl set image deployment/jpeg2avif-js-deployment \
          jpeg2avif-js=$IMAGE_TAG \
          -n ${{ env.NAMESPACE }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/jpeg2avif-js-deployment -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=jpeg2avif-js
        kubectl get services -n ${{ env.NAMESPACE }} -l app=jpeg2avif-js
